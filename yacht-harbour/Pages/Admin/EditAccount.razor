@page "/Admin/EditAccount/{AccountID:int}"

@using yacht_harbour.Data


@inject NavigationManager NavigationManager

@inject Repository.Services.AccountManagmentService accountService

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<h3>Edytuj dane konta</h3>
<hr>


@if (accountFront is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-item2">
        <h3></h3>
        <EditForm class="box-shadow" Model="@accountFront" OnValidSubmit="@updateAccountData">
            <div>

                <div class="container">
                    <div class="row">
                        <div class="flex-md-column mx-auto"><p>Imię:</p>   <InputText id="Name" @bind-Value="accountFront.Name" /></div>
                         <div class="flex-md-column mx-auto"><p>Nazwisko:</p>     <InputText id="Surname" @bind-Value="accountFront.Surname" /></div>
                        <div class="flex-md-column mx-auto"><p>Role:</p>
                            <select id="Role" @bind="accountFront.Role"> 
                             @foreach(string roleName in roleNames)
                            {
                                <option value="@roleName">@roleName</option>
                            }
                         </select>
                        </div>
                        
                        
                    </div>
                    <br />

                    <div class="row">
                       
                        
                        <div class="flex-md-column mx-auto">
                            <p>Nowe hasło:</p>
                            <div class='e-input-group'>
                                <InputText type="@TxtType" id="ConfirmPassword" @bind-Value="insertedNewPassword" class='e-input' />
                            </div>
                        </div>
                        <div class="flex-md-column mx-auto">
                            <p>Powtórz nowe hasło:</p>
                            <div class='e-input-group'>
                                <InputText type="@TxtType" id="ConfirmPassword" @bind-Value="insertedNewPasswordConfirmation" class='e-input' />

                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="row">
                        <div class="flex-md-column mx-auto"><p>Telefon:</p>     <InputText id="PhoneNumber" @bind-Value="accountFront.PhoneNumber" /></div>

                        



                    </div>
                    <br />


                   
                    <br />

                </div>
                <br/>
                         


            </div>


            <DataAnnotationsValidator />
            <ValidationSummary />

            <br />
            <center>
                <button type="submit" class="btn btn-primary mb-2">Zaktualizuj dane</button>
            </center>
            <br />

            <center>
                <button type="button" class="btn btn-primary" @onclick="goToUserData">Powrót</button>
            </center>
        </EditForm>
    </div>

}

@if (wasException)
{
    <center>
        <hr>
        <p style="color:rgb(255,51,51)">@error</p>
    </center>
}

@code
{
    [Parameter]
    public int AccountID {get;set;}
  
    private string insertedNewPassword;
    private string insertedNewPasswordConfirmation;
    private string insertedOldPassword;
    private Models.AccountFront accountFront;
    public List<string> roleNames = new List<string> {"None", "Sailor", "Maat", "Boatswain" };
    private string error;
    private bool wasException;
    public string TxtType = "password";

    protected override async Task OnParametersSetAsync()
    {
        wasException = false;
        try
        {
            await initAccountData();
           
            insertedNewPassword = "";
            insertedNewPasswordConfirmation = "";

        }
        catch (Exception e)
        {
            error = e.Message;
            wasException = true;
        }
    }

    private async Task initAccountData()
    {
        

        var dbUser = await accountService.GetAccountByID(AccountID);
        accountFront = new Models.AccountFront()
            {
                IdAccount = dbUser.IdAccount,
                Email = dbUser.Email,
                Password = dbUser.Password,
                Name = dbUser.Name,
                Surname = dbUser.Surname,
                PhoneNumber = dbUser.PhoneNumber,
                Role = dbUser.Role,

            };




    }

    private async void updateAccountData()
    {

        try
        {

            if (insertedNewPassword != insertedNewPasswordConfirmation) throw new Exception("Błędnie podane stare lub nowe hasła!");

            if ((insertedNewPassword == "" && insertedNewPasswordConfirmation != "") || 
                (insertedNewPassword != "" && insertedNewPasswordConfirmation == ""))
                throw new Exception("Uzupełnij pola haseł!");
            if (accountFront.PhoneNumber == "") throw new Exception("Podaj poprawny numer telefonu!");

            if (insertedNewPassword == "" && insertedNewPasswordConfirmation == "" &&
                    accountFront.IdAccount.ToString() != "" && accountFront.Surname.ToString() != "" && accountFront.Role != "")
            {
               

                var tmp = await accountService.UpdateAccount(accountFront.IdAccount, accountFront.Name, accountFront.Surname, accountFront.Email,accountFront.Password, accountFront.PhoneNumber, accountFront.Role);

                NavigationManager.NavigateTo("/Admin/DisplayAccounts");
            }

            else
            {
               

               

                var newHashedPassword = new passwordController().hashPassword(insertedNewPassword);
                var tmp = await accountService.UpdateAccount(accountFront.IdAccount, accountFront.Name, accountFront.Surname, accountFront.Email,newHashedPassword, accountFront.PhoneNumber, accountFront.Role);
               
            
                
             



                NavigationManager.NavigateTo("/Admin/DisplayAccounts");
            }


        }
        catch (Exception e)
        {

            wasException = true;
            error = e.Message;
            this.StateHasChanged();

        }
    }

    public void ShowPassword()
    {
        if (this.TxtType == "password")
        {
            this.TxtType = "text";
        }
        else
        {
            this.TxtType = "password";
        }
    }

    private void goToUserData()
    {
        NavigationManager.NavigateTo("/Admin/DisplayAccounts");
    }

}
