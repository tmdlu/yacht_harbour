@layout LoginLayout
@page "/register"

@using Models
@using yacht_harbour.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Repository.Services.AccountManagmentService managmentService

<style>
    button{
        margin-top:2px;
    }
    div{
        margin:1px;
    }
    h3{
        margin-bottom:1%;
        
    }
    hr{
        width:400px;
    }
    button{
        margin:auto;
    }
    .outer_container{
        display:flex;
        flex-direction:row;
        justify-content:center;
    }
    .flex-container_login{
      margin-right:2%;
    
    }
    .flex-container_addres{
      margin-left:2%;
    }
</style>
<center>
    <h3 class="display-4">Rejestracja</h3>
</center>
<hr class="my-3" />
<EditForm Model="@newAccount" OnValidSubmit="@ValidateUser">
    <div class="box-shadow">
        <div class="outer_container">
            <div class ="flex-container_login">
                <DataAnnotationsValidator/>
                <div>E-Mail: <br />   <InputText id="Email" @bind-Value="newAccount.Email" />
                <div style="color:rgb(255,51,51)">
                    @if(wrongEmail)
                    {
                       <p>Ten Email jest już użyty!</p>
                    }
                    <ValidationMessage For="() => newAccount.Email"/>
                </div>
                </div>
               
              
                <br />
                <div>Hasło:<br />   <InputText type="password" id="password" @bind-Value="newAccount.Password"/></div>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newAccount.Password"/>
                </div>
                <br />
                <div>Powtórz:<br />   <InputText type="password" id="retypePassword" @bind-Value="retypePassword"/></div>
                <div style="color:rgb(255,51,51)">
                    @if(wrongPassword)
                    {
                        <p>Hasła się różnią!</p>
                    }
                </div>
                <br />
                <center>
                    <button type="submit" class="btn btn-primary">Zarejestruj się</button>
                </center>
             </div>
             <div class ="flex-container_addres">
                <div>Imię: <br />     <InputText id="firstName" @bind-Value="newAccount.Name"/>
                 <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newAccount.Name"/>
                </div>
                </div>
                <br />
                <div>Nazwisko:<br />   <InputText id="secondName" @bind-Value="newAccount.Surname"/>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newAccount.Surname"/>
                </div>
                </div>
                <br />
                <div>Telefon: <br />    <InputText id="Phone" @bind-Value="newAccount.PhoneNumber"/>
                <div style="color:rgb(255,51,51)">
                    <ValidationMessage For="() => newAccount.PhoneNumber"/>
                </div>
                </div>
        
               
               </div>
        </div>
    </div>
</EditForm>
    


@if(isException) 
{

}

@code 
{
 
    private AccountFront newAccount;
    private string error;
    private string retypePassword;
    private bool isException = false;
    private bool wrongPassword = false;
    private bool wrongEmail = false;
    private string passwordValidationMessage = "";

    protected override Task OnInitializedAsync()
    {

        newAccount = new AccountFront();

        return base.OnInitializedAsync();
    }

    private bool checkPasswordFront() => newAccount.Password == retypePassword ? true : false;

    private async Task<bool> ValidateUser()
    {
        try
        {
            if (!(managmentService.isAccountWithSameEmail(newAccount.Email)))
            {
                wrongEmail = false;
                if (checkPasswordFront())
                {
                    wrongPassword= isException = false;
                    newAccount.Role = "";
                    newAccount.ClubStatus = "";
                    var hashedPassword = new passwordController().hashPassword(newAccount.Password);
                    var Account = await managmentService.AddNewAccount(newAccount.Name, newAccount.Surname, newAccount.Email, hashedPassword, newAccount.PhoneNumber, newAccount.Role);

                    ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(newAccount);
                    NavigationManager.NavigateTo("/");
                    await sessionStorage.SetItemAsStringAsync("account_id", Account.IdAccount.ToString());

                    await sessionStorage.SetItemAsStringAsync("email", Account.Email);
                    await sessionStorage.SetItemAsStringAsync("name", Account.Name);
                    await sessionStorage.SetItemAsStringAsync("surname", Account.Surname);
                    await sessionStorage.SetItemAsStringAsync("password", Account.Password);
                    await sessionStorage.SetItemAsStringAsync("phone", Account.PhoneNumber);

                    await sessionStorage.SetItemAsStringAsync("status", Account.ClubStatus);
                    await sessionStorage.SetItemAsStringAsync("role", Account.Role);



                    newAccount = new AccountFront();

                    return await Task.FromResult(true);
                }
                else
                {
                    wrongPassword = true;
                    isException = true;
                    throw new Exception("Incorect password!");
                }
            }
            else
            {
                wrongEmail = true;
                isException = true;
                throw new Exception("Incorect email!"); 
            }

        }
        catch (Exception e)
        {
            this.StateHasChanged();
            error = e.ToString();
            isException = true;
            return await Task.FromResult(false);
        }
    }
}