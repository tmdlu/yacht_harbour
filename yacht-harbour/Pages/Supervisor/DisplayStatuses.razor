@page "/Supervisor/DisplayStatuses"
@using DataBaseAccess.Models
@inject Repository.Services.AccountManagmentService accountService;
@inject Repository.Services.OrderService orderService;
@inject Repository.Services.YachtService YachtService;
@inject Repository.Services.PowerService powerService;
@inject Repository.Services.StatusService statusService;
@inject Repository.Services.CalendarService calendarService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager _navigationManager;
@using yacht_harbour.Pages.Popus;

<style>
    #search {
  width: 110%;
  padding: 12px 20px;
  box-sizing: border-box;
  border: 2px solid #ccc;
  border-radius: 4px;
  height: 2em;
}

#multiselect {
  width: 110%;
  padding: 0px 20px;
  margin: 8px 0;
  box-sizing: border-box;
  border: 2px solid #ccc;
  border-radius: 4px;
  height: 5em;
  
} 
.row {
    display: flex;
}
.col {
    flex: 1;
}
</style>


@if (isLoaded && isAuthorised)
{
    <YachtPopus HeaderText="Wiecej informacji"  @ref="popus"></YachtPopus>
   <center>
        <h4> Wybierz przedział</h4>
           <form>
             <input  type="date" id="datemin" @bind-value="lowerDate" >
             <label> - </label>
             <input type="date" id="datemax" @bind="upperDate">
           </form>
           <br/>
           
          

            <div class="row">
                 <div class="col" style="margin-left:35%">
                     
                     @if(Yachts!=null)
                       {
                        <input type="text"  id="search" @oninput="FilterYachts" placeholder="Jacht">
                   
                       <select id="multiselect" @onchange="SelectYachts" multiple>
    
                           @if(filteredOptionYachts!=null)
                           {
                            @foreach (var yacht in filteredOptionYachts)
                              {
                          

                                <option value="@yacht.IdYacht" selected> @yacht.YachtName </option>
                              }
                           }
                        </select>
                
                       }
                </div>
             <div class="col" style="margin-right:35%">
                     @if(accounts!=null)
                   {
                       <input type="text"  id="search" @oninput="FilterAccounts" placeholder="Marynarz">
                   <select id="multiselect" @onchange="SelectAccounts" multiple>
                       @if(filteredOptionAccounts!=null)
                           {
                        @foreach (var acc in filteredOptionAccounts)
                          {
                            <option value="@acc.IdAccount" selected> @acc.Name @acc.Surname </option>
                          }
                           }
                    </select>
                   }
             </div>
    </div>






<br/>
      
</center>
<br/>
    @foreach (Yacht yacht in DisplayYachts)
    {
        int index = @DisplayYachts.IndexOf(yacht) + 1;
        <div class="card m-3" style="min-width: 18rem; max-width:50.auto%;">
            <div class="card-header text-center">
                <h3>Jacht Numer @index</h3>
                <h3> Nazwa: @yacht.YachtName</h3>
                <h3> Typ: @yacht.Type</h3>
                <a class="btn btn-login"  @onclick="() => showInfo(yacht.IdYacht)" >Info</a>
            </div>
            <div class="card-body">
                <div class="table-responsive" style="overflow-y:scroll; max-height: 20em;   display:block;">
                    <table class="table table-hover table-dark text-center">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Data statusu</th>
                                <th scope="col">Opis</th>
                                <th scope="col">Osoba dodająca status</th>
                                <th scope="col">Sternik </th>
                                <th scope="col">Typ </th>
                                <th scope="col">Możliwość pływania</th>
                                
                                


                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int rowIndex = 1;
                            }


                            @foreach (Tuple<Status, string, string> status in StatusesWithNames)
                            {
                                @if (status.Item1.YachtIdYacht == yacht.IdYacht &&(status.Item1.StatusDate >=lowerDate && status.Item1.StatusDate<=upperDate))
                                {
                                   
                                    @foreach (Account acc in DisplayAccounts)
                                    {
                                        @if(acc.IdAccount==status.Item1.AccountIdAccount)
                                        {
                                             
                                    <tr>
                                        <th scope="row">@rowIndex</th>
                                        <td> @status.Item1.StatusDate </td>
                                        <td>@status.Item1.Conditon</td>
                                        <td>@acc.Name @acc.Surname</td>
                                        <td>@status.Item2</td>
                                        <td>@status.Item3</td>
                                        @if (status.Item1.SailingPossibility)
                                        {
                                            <td>Tak</td>
                                        }
                                        @if (!status.Item1.SailingPossibility)
                                        {
                                            <td>Nie</td>
                                        }
                                        
                                       
                                       
                                       
                                       

                                    </tr>
                                    rowIndex++;
                                        }
                                    }
                                   
                                }
                            }




                        </tbody>
                    </table>
                    
                </div>
            </div>
            <a href="/Supervisor/AddStatus/@yacht.IdYacht" class="btn btn-warning btn-sm">Dodaj</a>
        </div>

    }
}



@if (!isAuthorised)
{
    <h2>Nie jesteś autoryzowany do uzyskania tego zasobu!</h2>
}


@code {

    private int UserID;
    private Account account { get; set; }
    private List<Yacht> Yachts;
    private Order orderToDelete;
    private List<Order> Orders;
    private List<Status> Statuses;
    List<Tuple<Status, string, string>> StatusesWithNames = new List<Tuple<Status, string, string>>();
    private bool isLoaded;
    private bool DeleteDialogOrderOpen;

    private List<Tuple<Power, int>> Powers;

    private List<Account> accounts;
    private bool isAuthorised = true;

    private DateTime lowerDate; 
    private DateTime upperDate;
    private List<Yacht> DisplayYachts = new List<Yacht>();
    private List<Yacht> filteredOptionYachts = new List<Yacht>();
    private List<Account> filteredOptionAccounts = new List<Account>();
    private List<Account> DisplayAccounts = new List<Account>();
    private YachtPopus popus;


    protected override async Task OnParametersSetAsync()
    {
        authorizationHandle();
     
        StatusesWithNames = await calendarService.GetStatusesWithNamesAndTypes();
        Yachts = await YachtService.GetYachts();
        Powers = await powerService.GetPowersWithAccountID();

        accounts = await accountService.GetAccounts();

        DisplayAccounts = accounts;
        DisplayYachts = Yachts;
        filteredOptionYachts = Yachts;
        filteredOptionAccounts = accounts;
        lowerDate = DateTime.Now.AddMonths(-1);
        upperDate = DateTime.Now;
        isLoaded = true;

    }
    public async void authorizationHandle()
    {
        try
        {
            await authorizeAccount();
        }
        catch // assuming account of a given ID has not been found
        {
            isAuthorised = false;
        }
    }


    public async Task authorizeAccount()
    {
        if(await sessionStorage.GetItemAsStringAsync("role")=="Boatswain" || await sessionStorage.GetItemAsStringAsync("role")=="Maat")
        {
            String accountId = await sessionStorage.GetItemAsStringAsync("account_id");

            UserID = Int32.Parse(accountId);
            account = await accountService.GetAccountByID(Int32.Parse(accountId));
        }
        else
            isAuthorised = false;

    }

    
    private void showInfo(int id)
    {
        popus.Show(id);
        
    }

    private void SelectYachts(ChangeEventArgs e)
    {
        DisplayYachts = new List<Yacht>();
        var selected = (string[])e.Value;
        foreach(var s in selected)
        {
            var temp = Task.Run(async () =>  await YachtService.getYachtById(Int32.Parse(s)));
            DisplayYachts.Add(temp.Result);
        }

    }
    private void SelectAccounts(ChangeEventArgs e)
    {
        DisplayAccounts = new List<Account>();
        var selected = (string[])e.Value;
        foreach(var s in selected)
        {
            var temp = Task.Run(async () =>  await accountService.GetAccountByID(Int32.Parse(s)));
            DisplayAccounts.Add(temp.Result);
        }

    }
    private void FilterYachts(ChangeEventArgs args)
    {

        string temp = args.Value.ToString();
        if (temp != null)
            filteredOptionYachts = Yachts.Where(o => o.YachtName.ToUpperInvariant().Contains(temp.ToUpperInvariant())).ToList();
        else
            filteredOptionYachts = Yachts;
    }
    private void FilterAccounts(ChangeEventArgs args)
    {
        string[] temp = args.Value.ToString().Split(' ');


        if (temp != null)
        {
            if (temp.Length==1)
            {
                temp = new[] { temp[0], "" };
            }
            

            filteredOptionAccounts = accounts.Where(o => (o.Name.ToUpperInvariant().Contains(temp[0].ToUpperInvariant()) && o.Surname.ToUpperInvariant().Contains(temp[1].ToUpperInvariant())) || (o.Surname.ToUpperInvariant().Contains(temp[0].ToUpperInvariant()) && o.Name.ToUpperInvariant().Contains(temp[1].ToUpperInvariant())) ).ToList();
        }
        else
            filteredOptionAccounts = accounts;
    }
   

}
