@using yacht_harbour.Data
@using DataBaseAccess.Models
@inject Repository.Services.PowerService powerService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Repository.Services.OrderService orderService;
@inject NavigationManager navigationManager;
@{
    var showClass = IsVisible ? "d-block" : "d-none";
}





    <div  class="toast-container  @showClass" data-bs-autohide="true" data-bs-delay="5000" style=" position: fixed; z-index: 9999;left:21.5%;">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" style="width:100%; overflow-y:scroll; max-height: 60em;   display:block;" 
            <center>
            <div class="toast-header">
                <strong class="me-auto">@HeaderText</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>

         
            
                 

        
            
          @foreach (Yacht yacht in yachts)
    {
        
        <div class="card m-3" style="min-width: 18rem; max-width:50.auto%;">
            <div class="card-header text-center">
               
                <h3> Nazwa: @yacht.YachtName</h3>
                <h3> Typ: @yacht.Type</h3>
            
            </div>
            <div class="card-body">
                <div class="table-responsive" style="overflow-y:scroll; max-height: 20em;   display:block;">
                    <table class="table table-hover table-dark text-center">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Data dodania</th>
                                <th scope="col">Data rozpoczenia</th>
                                <th scope="col">Data zakonczenia</th>
                                <th scope="col">Zaakceptane</th>
                                <th scope="col">Wydane</th>
                                <th scope="col">Odebrane</th>
                                <th scope="col">email</th>
                                <th scope="col">Typ</th>
                                <th scope="col">Działania</th>


                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int rowIndex = 1;
                            }


                            @foreach (Order order in orders)
                            {
                                if(((order.EndDate.Date>=date.Date && order.StartDate.Date<=date.Date && isTaken==false)|| (order.EndDate>=date && order.StartDate<=date && isTaken==true)) && yacht.IdYacht==order.YachtIdYacht)
                                {
                                   
                                    @foreach (Account acc in accounts )
                                    {
                                        @if(acc.IdAccount==order.AccountIdAccount)
                                        {
                                             
                                    <tr>
                                        <th scope="row">@rowIndex</th>
                                        <td>@order.RequestDate.ToString("g") </td>
                                        <td>@order.StartDate.ToString("g")</td>
                                        <td>@order.EndDate.ToString("g")</td>
                                        
                                        @if (order.IsAccepted)
                                        {
                                            <td>Tak</td>
                                        }
                                        @if (!order.IsAccepted)
                                        {
                                            <td>Nie</td>
                                        }
                                         @if (order.IsReleased)
                                        {
                                            <td>Tak</td>
                                        }
                                        @if (!order.IsReleased)
                                        {
                                            <td>Nie</td>
                                        }
                                        @if (order.IsReturned)
                                        {
                                            <td>Tak</td>
                                        }
                                        @if (!order.IsReturned)
                                        {
                                            <td>Nie</td>
                                        }
                                        
                                        <th scope="col">@acc.Email </th>
                                        <td>@order.OrderType </td>
                                          <td>
                                        @if (@order.IsReleased != true)
                                        {
                                            
                                                 <a href="/Maat/Release/@order.IdOrder" class="btn btn-success btn-sm">Wydaj</a>
                                           
                                        }
                                        
                                         @if (@order.IsReleased == true && @order.IsReturned!=true)
                                        {
                                           
                                           
                                                <a href="/Maat/Return/@order.IdOrder" class="btn btn-success btn-sm">Odbierz</a>
                                            
                                           
                                        }
                                       </td> 
                                    </tr>
                                    rowIndex++;
                                        }
                                    }
                                   
                                }
                            }




                        </tbody>
                    </table>
                    
                </div>
            </div>
        </div>
    }
           
            
            </center>
        </div>
    </div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }
    private int UserID;
     private bool isTaken=false;
    private string choice;
    private DateTime date;
    List<Order> orders = new List<Order>();
    List<Yacht> yachts = new List<Yacht>();
    List<Account> accounts = new List<Account>();
    [Parameter] 
    public EventCallback<(string, DateTime)> OnDoneCallback { get; set; }
    [Parameter]
    public string? HeaderText { get; set; }
    private List<Tuple<Power, int>> Powers;

    protected override async Task OnParametersSetAsync()
    {
        Powers = await powerService.GetPowersWithAccountID();
        String accountId = await sessionStorage.GetItemAsStringAsync("account_id");

        UserID = Int32.Parse(accountId);
    }


    public void Show(DateTime _date, List<Order> _orders,List<Yacht> _yachts, List<Account> _accounts, bool _isTaken)
    {
        date = _date;
        orders = _orders;
        yachts = _yachts;
        accounts = _accounts;
        IsVisible = true;
        isTaken = _isTaken;
        StateHasChanged();
    }

    public void Close()
    {
        HeaderText = string.Empty;

        IsVisible = false;
        StateHasChanged();
    }

    
    
    protected async Task AcceptationChange(Order orderToChange)
    {
        if (orderToChange != null)
        {
            
            orderService.updateActeptation(orderToChange.IdOrder,!orderToChange.IsAccepted, UserID);
            orderToChange = null;
            await Task.Delay(1000);
            orders = await orderService.GetAllOrders();
            OnParametersSet();
         StateHasChanged();
        


            
            
        }
        


    }

}