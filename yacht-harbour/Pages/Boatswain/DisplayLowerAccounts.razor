@page "/Boatswain/DisplayLowerAccounts"
@using DataBaseAccess.Models
@inject Repository.Services.AccountManagmentService accountService;
@inject Repository.Services.OrderService orderService;
@inject Repository.Services.StatusService statusService;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager navigationManager;


@if (isLoaded && isAuthorised)
{
    <center>
       
    <div class="row-md-5">
        <input type="text" id="search" @oninput="SearchIssues" placeholder="Szukaj"/>
        
    </div>
    <br/>
    <button type="button" class="btn btn-primary" @onclick="triggerShow">@buttonText</button>
   
    
   
        
        
        *@
    </center>
   
    @foreach (Account lowAccount in searchAccounts)
    {
        
        int index = @searchAccounts.IndexOf(lowAccount) + 1;
         
        <div class="card m-3" style="min-width: 18rem; max-width:50.auto%;">
            <div class="card-header text-center">
                <h3>Użytkownik Numer @index</h3>
                <h3> Imię: @lowAccount.Name</h3>
                <h3> Nazwisko: @lowAccount.Surname</h3>
                <h3> Email: @lowAccount.Email</h3>
                <h3> Rola: @lowAccount.Role</h3>
               
                <a href="/Boatswain/EditLowerAccount/@lowAccount.IdAccount" class="btn btn-success btn-sm">Edytuj</a>
                <button type="button" class="btn btn-primary btn-sm" @onclick="() =>deleteAccount(lowAccount.IdAccount)">Usuń</button>
            
            </div>
           
        </div>
    }
}



@if (!isAuthorised)
{
    <h2>Nie jesteś autoryzowany do uzyskania tego zasobu!</h2>
}


@code {
    private string searchTerm;
    private List<Account> searchAccounts = new List<Account>();
    private int UserID;
    private Account account { get; set; }
    private List<Yacht> Yachts;
    private Order orderToDelete;
    private List<Order> Orders;
    private bool isLoaded;
    private string buttonText;
    private bool DeleteDialogOrderOpen;
    private bool withoutRoles =false;
    private List<Account> accounts;
    List<Tuple<int, List<Order>>> YachtsWithOrders = new List<Tuple<int, List<Order>>>();
    private bool isAuthorised = true;
    protected override async Task OnParametersSetAsync()
    {
        authorizationHandle();
       
        buttonText = "Pokaż bez roli";
        accounts = await accountService.GetLowerAccounts();
        searchAccounts = accounts;
        searchTerm = "";
        isLoaded = true;

    }
    public async void authorizationHandle()
    {
        try
        {
            await authorizeAccount();
        }
        catch // assuming account of a given ID has not been found
        {
            isAuthorised = false;
        }
    }


    public async Task authorizeAccount()
    {
        if(await sessionStorage.GetItemAsStringAsync("role")=="Boatswain")
        {
            String accountId = await sessionStorage.GetItemAsStringAsync("account_id");

            UserID = Int32.Parse(accountId);
            account = await accountService.GetAccountByID(Int32.Parse(accountId));
        }
        else
            isAuthorised = false;

    }
    protected void deleteAccount(int userID)
    {

        var temp = Task.Run(async () => await  orderService.GetUserOrders(userID));
        var temp2 = Task.Run(async () => await  statusService.GetUserStatuses(userID));

        if (temp.Result.Count ==0 && temp2.Result.Count ==0)
        {
            accountService.DeleteAccount(userID);
        }

        this.refresh();



    }
    private async void refresh()
    {
        accounts = await accountService.GetLowerAccounts();
        this.StateHasChanged();
        navigationManager.NavigateTo("/Boatswain/DisplayLowerAccounts", true);
    }

    private async void triggerShow()
    {
        if (withoutRoles == true)
        {
            withoutRoles = false;
            buttonText = "Pokaż bez roli";
            searchAccounts = await accountService.GetAccountsByFullName(searchTerm);
        }

        else
        {
            withoutRoles = true;
            buttonText = "Pokaż wszystkich";
            searchAccounts = await accountService.GetAccountsByFullNameRoleless(searchTerm);
        }
        this.StateHasChanged();
    }

    private async Task SearchIssues(ChangeEventArgs args)
    {
        searchTerm = args.Value.ToString();
        searchAccounts = await accountService.GetAccountsByFullName(searchTerm);
        this.StateHasChanged();
    }

}
